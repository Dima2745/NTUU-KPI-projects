<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2020.1 (Build 215U)" ts="2020-12-07 21:55:00">
<Class name="UnitTests.User">
<Super>%UnitTest.TestCase</Super>
<TimeChanged>65719,84364.931116</TimeChanged>
<TimeCreated>65691,69496.572271</TimeCreated>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(PhotoGalery.Post).%DeleteExtent()
	return ##class(PhotoGalery.User).%DeleteExtent()
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(PhotoGalery.Post).%DeleteExtent()
	return ##class(PhotoGalery.User).%DeleteExtent()
]]></Implementation>
</Method>

<Method name="TestUser">
<Implementation><![CDATA[
	set p = ##class(PhotoGalery.User).%New()
	do $$$AssertTrue($isobject(p), "Create new User")
	
	set status = p.%Save()
	do $$$AssertStatusNotOK(status, "Do not save when required Fields are missing")
	
	set firstPost = ##class(PhotoGalery.Post).%New()
	set firstPost.id = 1
	do firstPost.text.Write("My first post ever!")
	do firstPost.notes.SetAt("Testing post creation", "Purpose")
	do firstPost.notes.SetAt("Landscape", "Theme")
	set firstPost.created =  $PIECE($H, ",", 0, 1)
	set firstPost.posts = p
	
	set p.id = 1
	set p.name = "Dima"
	set p.created = $PIECE($H, ",", 0, 1)
	do p.posts.Insert(firstPost)
	
	set status = p.%Save()
	do $$$AssertStatusOK(status, "Save when required Fields are filled")
	
	set status = ##class(PhotoGalery.Post).%ExistsId(firstPost.%Id())
	do $$$AssertEquals(status, 1, "Post is also saved")
	
	set status = ##class(PhotoGalery.User).%DeleteId(p.%Id())
	do $$$AssertStatusOK(status, "Delete user data")
	
	set status = ##class(PhotoGalery.Post).%ExistsId(firstPost.%Id())
	do $$$AssertEquals(status, 0, "Post is also deleted")
]]></Implementation>
</Method>
</Class>
</Export>
